<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#10;    &lt;title&gt;AUST CSE Carnival&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;./assets/theme.css&quot; /&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css&quot;&gt;&#10;  &lt;/head&gt;&#10;  &lt;body&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/main.jsx&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#13;&#10;&lt;html lang=&quot;en&quot;&gt;&#13;&#10;  &lt;head&gt;&#13;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#13;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;&#13;&#10;    &lt;title&gt;AUST CSE Carnival&lt;/title&gt;&#13;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css&quot;&gt;&#13;&#10;  &lt;/head&gt;&#13;&#10;  &lt;body&gt;&#13;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#13;&#10;    &lt;script type=&quot;module&quot; src=&quot;/src/main.jsx&quot;&gt;&lt;/script&gt;&#13;&#10;  &lt;/body&gt;&#13;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/App.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/App.jsx" />
              <option name="originalContent" value="import React, { Suspense, lazy } from 'react';&#10;import { Routes, Route } from 'react-router-dom';&#10;import { HelmetProvider } from 'react-helmet-async';&#10;import { Toaster } from 'react-hot-toast';&#10;import LoadingSpinner from './components/common/LoadingSpinner';&#10;import ErrorBoundary from './components/common/ErrorBoundary';&#10;import './assets/theme.css';&#10;import 'aos/dist/aos.css';&#10;&#10;// Lazy load pages for better performance&#10;const Home = lazy(() =&gt; import('./pages/home/Home'));&#10;const Event = lazy(() =&gt; import('./pages/event/EventUpdated')); // Updated to use new component&#10;const Gallery = lazy(() =&gt; import('./pages/gallery/Gallery'));&#10;const Sponsor = lazy(() =&gt; import('./pages/sponsor/Sponsor'));&#10;const Contact = lazy(() =&gt; import('./pages/contact/Contact'));&#10;const NotFound = lazy(() =&gt; import('./pages/NotFound/NotFound'));&#10;const SegmentDetails = lazy(() =&gt; import('./pages/segment-details/SegmentDetails'));&#10;&#10;function App() {&#10;  return (&#10;    &lt;HelmetProvider&gt;&#10;      &lt;ErrorBoundary&gt;&#10;        &lt;div className=&quot;app&quot;&gt;&#10;          &lt;Suspense fallback={&lt;LoadingSpinner /&gt;}&gt;&#10;            &lt;Routes&gt;&#10;              &lt;Route path=&quot;/&quot; element={&lt;Home /&gt;} /&gt;&#10;              &lt;Route path=&quot;/event&quot; element={&lt;Event /&gt;} /&gt;&#10;              &lt;Route path=&quot;/gallery&quot; element={&lt;Gallery /&gt;} /&gt;&#10;              &lt;Route path=&quot;/sponsor&quot; element={&lt;Sponsor /&gt;} /&gt;&#10;              &lt;Route path=&quot;/contact&quot; element={&lt;Contact /&gt;} /&gt;&#10;              &lt;Route path=&quot;/segment/:id&quot; element={&lt;SegmentDetails /&gt;} /&gt;&#10;              &lt;Route path=&quot;*&quot; element={&lt;NotFound /&gt;} /&gt;&#10;            &lt;/Routes&gt;&#10;          &lt;/Suspense&gt;&#10;          &lt;Toaster&#10;            position=&quot;top-right&quot;&#10;            toastOptions={{&#10;              duration: 4000,&#10;              style: {&#10;                background: 'var(--color-secondary-dark)',&#10;                color: 'var(--color-text-light)',&#10;                border: '1px solid var(--color-accent-bright)',&#10;              },&#10;            }}&#10;          /&gt;&#10;        &lt;/div&gt;&#10;      &lt;/ErrorBoundary&gt;&#10;    &lt;/HelmetProvider&gt;&#10;  );&#10;}&#10;&#10;export default App;&#10;" />
              <option name="updatedContent" value="import React, { Suspense, lazy } from 'react';&#10;import { Routes, Route } from 'react-router-dom';&#10;import { HelmetProvider } from 'react-helmet-async';&#10;import { Toaster } from 'react-hot-toast';&#10;import LoadingSpinner from './components/common/LoadingSpinner';&#10;import ErrorBoundary from './components/common/ErrorBoundary';&#10;import './assets/theme.css';&#10;import 'aos/dist/aos.css';&#10;&#10;// Lazy load pages for better performance&#10;const Home = lazy(() =&gt; import('./pages/home/Home'));&#10;const Event = lazy(() =&gt; import('./pages/event/EventUpdated'));&#10;const Gallery = lazy(() =&gt; import('./pages/gallery/Gallery'));&#10;const Sponsor = lazy(() =&gt; import('./pages/sponsor/Sponsor'));&#10;const Contact = lazy(() =&gt; import('./pages/contact/Contact'));&#10;const NotFound = lazy(() =&gt; import('./pages/NotFound/NotFound'));&#10;const SegmentDetails = lazy(() =&gt; import('./pages/segment-details/SegmentDetails'));&#10;&#10;function App() {&#10;  return (&#10;    &lt;HelmetProvider&gt;&#10;      &lt;ErrorBoundary&gt;&#10;        &lt;div className=&quot;app&quot;&gt;&#10;          &lt;Suspense fallback={&lt;LoadingSpinner /&gt;}&gt;&#10;            &lt;Routes&gt;&#10;              &lt;Route path=&quot;/&quot; element={&lt;Home /&gt;} /&gt;&#10;              &lt;Route path=&quot;/event&quot; element={&lt;Event /&gt;} /&gt;&#10;              &lt;Route path=&quot;/gallery&quot; element={&lt;Gallery /&gt;} /&gt;&#10;              &lt;Route path=&quot;/sponsor&quot; element={&lt;Sponsor /&gt;} /&gt;&#10;              &lt;Route path=&quot;/contact&quot; element={&lt;Contact /&gt;} /&gt;&#10;              &lt;Route path=&quot;/segment/:id&quot; element={&lt;SegmentDetails /&gt;} /&gt;&#10;              &lt;Route path=&quot;*&quot; element={&lt;NotFound /&gt;} /&gt;&#10;            &lt;/Routes&gt;&#10;          &lt;/Suspense&gt;&#10;          &lt;Toaster&#10;            position=&quot;top-right&quot;&#10;            toastOptions={{&#10;              duration: 4000,&#10;              style: {&#10;                background: 'var(--color-secondary-dark)',&#10;                color: 'var(--color-text-light)',&#10;                border: '1px solid var(--color-accent-bright)',&#10;              },&#10;            }}&#10;          /&gt;&#10;        &lt;/div&gt;&#10;      &lt;/ErrorBoundary&gt;&#10;    &lt;/HelmetProvider&gt;&#10;  );&#10;}&#10;&#10;export default App;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/pages/gallery/Gallery.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/pages/gallery/Gallery.jsx" />
              <option name="originalContent" value="import React, { useState, useEffect, useRef, useCallback } from 'react';&#10;import Header from '../../components/header/Header';&#10;import Footer from '../../components/footer/Footer';&#10;import Icon from '../../components/common/Icon';&#10;import styles from './Gallery.module.css';&#10;&#10;// Import carnival images with proper error handling and correct paths&#10;const importCarnivalImages = (carnivalVersion, count) =&gt; {&#10;  const images = [];&#10;  for (let i = 1; i &lt;= count; i++) {&#10;    images.push({&#10;      src: `./assets/images/carnivals/Carnival ${carnivalVersion}.0/carnival_${carnivalVersion}_img_${i}.jpg`,&#10;      alt: `AUST CSE Carnival ${carnivalVersion}.0 - Memory ${i}`,&#10;      id: `carnival_${carnivalVersion}_${i}`,&#10;      thumbnail: `./assets/images/carnivals/Carnival ${carnivalVersion}.0/carnival_${carnivalVersion}_img_${i}.jpg`&#10;    });&#10;  }&#10;  return images;&#10;};&#10;&#10;// Enhanced carnival data with comprehensive information&#10;const carnivalData = {&#10;  &quot;1.0&quot;: {&#10;    title: &quot;Integer 43&quot;,&#10;    subtitle: &quot;The Pioneer Journey Begins&quot;,&#10;    description: &quot;The very first AUST CSE Carnival that started our amazing tradition of innovation and technology celebration.&quot;,&#10;    year: &quot;2021&quot;,&#10;    gradient: &quot;linear-gradient(135deg, var(--color-secondary-dark) 0%, var(--color-accent-dark) 100%)&quot;,&#10;    accentColor: &quot;#03624c&quot;,&#10;    icon: &quot;rocket&quot;,&#10;    position: &quot;left&quot;,&#10;    images: importCarnivalImages(&quot;1&quot;, 18),&#10;    stats: { photos: 18, events: 5, participants: &quot;500+&quot;, duration: &quot;3 days&quot; },&#10;    highlights: [&quot;First Ever Carnival&quot;, &quot;Programming Contest&quot;, &quot;Tech Exhibition&quot;]&#10;  },&#10;  &quot;2.0&quot;: {&#10;    title: &quot;Decipher 44&quot;,&#10;    subtitle: &quot;Continuing the Legacy&quot;,&#10;    description: &quot;Building upon our foundation with expanded events and greater participation from the tech community.&quot;,&#10;    year: &quot;2022&quot;,&#10;    gradient: &quot;linear-gradient(135deg, var(--color-accent-dark) 0%, var(--color-accent-bright) 100%)&quot;,&#10;    accentColor: &quot;#2ec095&quot;,&#10;    icon: &quot;target&quot;,&#10;    position: &quot;right&quot;,&#10;    images: importCarnivalImages(&quot;2&quot;, 6),&#10;    stats: { photos: 6, events: 6, participants: &quot;750+&quot;, duration: &quot;3 days&quot; },&#10;    highlights: [&quot;UI/UX Competition&quot;, &quot;Hackathon&quot;, &quot;AI Workshop&quot;]&#10;  },&#10;  &quot;3.0&quot;: {&#10;    title: &quot;Qubits 45&quot;,&#10;    subtitle: &quot;Setting New Benchmarks&quot;,&#10;    description: &quot;A quantum leap in carnival excellence with cutting-edge competitions and industry partnerships.&quot;,&#10;    year: &quot;2023&quot;,&#10;    gradient: &quot;linear-gradient(135deg, var(--color-primary-dark) 0%, var(--color-secondary-dark) 100%)&quot;,&#10;    accentColor: &quot;#042222&quot;,&#10;    icon: &quot;star&quot;,&#10;    position: &quot;left&quot;,&#10;    images: importCarnivalImages(&quot;3&quot;, 8),&#10;    stats: { photos: 8, events: 7, participants: &quot;1000+&quot;, duration: &quot;4 days&quot; },&#10;    highlights: [&quot;Quantum Computing&quot;, &quot;Robotics Showcase&quot;, &quot;Startup Pitch&quot;]&#10;  },&#10;  &quot;4.0&quot;: {&#10;    title: &quot;Carnival 4.0&quot;,&#10;    subtitle: &quot;Innovation at Its Peak&quot;,&#10;    description: &quot;The fourth iteration brought revolutionary changes with international participation and advanced tech demos.&quot;,&#10;    year: &quot;2024&quot;,&#10;    gradient: &quot;linear-gradient(135deg, var(--color-accent-bright) 0%, var(--color-accent-dark) 100%)&quot;,&#10;    accentColor: &quot;#2ec095&quot;,&#10;    icon: &quot;tent&quot;,&#10;    position: &quot;right&quot;,&#10;    images: importCarnivalImages(&quot;4&quot;, 10),&#10;    stats: { photos: 10, events: 8, participants: &quot;1200+&quot;, duration: &quot;4 days&quot; },&#10;    highlights: [&quot;International Speakers&quot;, &quot;VR/AR Demos&quot;, &quot;Blockchain Workshop&quot;]&#10;  },&#10;  &quot;5.0&quot;: {&#10;    title: &quot;Carnival 5.0&quot;,&#10;    subtitle: &quot;The Future is Here&quot;,&#10;    description: &quot;Our most ambitious carnival yet, showcasing the latest in AI, machine learning, and emerging technologies.&quot;,&#10;    year: &quot;2025&quot;,&#10;    gradient: &quot;linear-gradient(135deg, var(--color-secondary-dark) 0%, var(--color-accent-bright) 100%)&quot;,&#10;    accentColor: &quot;#2ec095&quot;,&#10;    icon: &quot;sparkles&quot;,&#10;    position: &quot;left&quot;,&#10;    images: importCarnivalImages(&quot;5&quot;, 12),&#10;    stats: { photos: 12, events: 10, participants: &quot;1500+&quot;, duration: &quot;5 days&quot; },&#10;    highlights: [&quot;AI Revolution&quot;, &quot;Metaverse Expo&quot;, &quot;Global Tech Summit&quot;]&#10;  }&#10;};&#10;&#10;const Gallery = () =&gt; {&#10;  const [activeGallery, setActiveGallery] = useState(null);&#10;  const [currentImageIndex, setCurrentImageIndex] = useState(0);&#10;  const [isGalleryOpen, setIsGalleryOpen] = useState(false);&#10;  const [isLoading, setIsLoading] = useState(false);&#10;  const [imageLoadError, setImageLoadError] = useState(false);&#10;  const [visibleSections, setVisibleSections] = useState(new Set(['hero'])); // Initialize with hero visible&#10;&#10;  const roadmapRef = useRef(null);&#10;  const observerRef = useRef(null);&#10;&#10;  // Fixed Intersection Observer for scroll animations - completely rewritten&#10;  useEffect(() =&gt; {&#10;    // Cleanup any existing observer&#10;    if (observerRef.current) {&#10;      observerRef.current.disconnect();&#10;    }&#10;&#10;    // Create a more reliable intersection observer&#10;    const observerCallback = (entries) =&gt; {&#10;      entries.forEach((entry) =&gt; {&#10;        const sectionId = entry.target.getAttribute('data-section');&#10;        if (sectionId) {&#10;          if (entry.isIntersecting) {&#10;            setVisibleSections(prev =&gt; {&#10;              const newSet = new Set(prev);&#10;              newSet.add(sectionId);&#10;              console.log('Section visible:', sectionId); // Debug log&#10;              return newSet;&#10;            });&#10;          }&#10;        }&#10;      });&#10;    };&#10;&#10;    observerRef.current = new IntersectionObserver(observerCallback, {&#10;      threshold: 0.1,&#10;      rootMargin: '50px 0px -20px 0px'&#10;    });&#10;&#10;    // Wait for DOM to be fully ready, then observe elements&#10;    const observeElements = () =&gt; {&#10;      const sections = document.querySelectorAll('[data-section]');&#10;      console.log('Found sections:', sections.length); // Debug log&#10;&#10;      sections.forEach((section) =&gt; {&#10;        if (section &amp;&amp; observerRef.current) {&#10;          observerRef.current.observe(section);&#10;          console.log('Observing section:', section.getAttribute('data-section')); // Debug log&#10;        }&#10;      });&#10;    };&#10;&#10;    // Use a longer delay and also try on next tick&#10;    const timer1 = setTimeout(observeElements, 200);&#10;    const timer2 = setTimeout(observeElements, 500);&#10;&#10;    // Also try on next animation frame&#10;    requestAnimationFrame(() =&gt; {&#10;      setTimeout(observeElements, 100);&#10;    });&#10;&#10;    return () =&gt; {&#10;      clearTimeout(timer1);&#10;      clearTimeout(timer2);&#10;      if (observerRef.current) {&#10;        observerRef.current.disconnect();&#10;      }&#10;    };&#10;  }, []); // Keep empty dependency array&#10;&#10;  // Force visibility check on mount and scroll&#10;  useEffect(() =&gt; {&#10;    const handleScroll = () =&gt; {&#10;      const sections = document.querySelectorAll('[data-section]');&#10;      sections.forEach(section =&gt; {&#10;        const rect = section.getBoundingClientRect();&#10;        const isVisible = rect.top &lt; window.innerHeight &amp;&amp; rect.bottom &gt; 0;&#10;&#10;        if (isVisible) {&#10;          const sectionId = section.getAttribute('data-section');&#10;          if (sectionId) {&#10;            setVisibleSections(prev =&gt; {&#10;              const newSet = new Set(prev);&#10;              newSet.add(sectionId);&#10;              return newSet;&#10;            });&#10;          }&#10;        }&#10;      });&#10;    };&#10;&#10;    // Initial check&#10;    setTimeout(handleScroll, 100);&#10;&#10;    // Add scroll listener as backup&#10;    window.addEventListener('scroll', handleScroll, { passive: true });&#10;&#10;    return () =&gt; {&#10;      window.removeEventListener('scroll', handleScroll);&#10;    };&#10;  }, []);&#10;&#10;  // Enhanced gallery opening with preloading&#10;  const openGallery = useCallback((carnivalVersion) =&gt; {&#10;    setIsLoading(true);&#10;    setImageLoadError(false);&#10;    setActiveGallery(carnivalVersion);&#10;    setCurrentImageIndex(0);&#10;    setIsGalleryOpen(true);&#10;    document.body.style.overflow = 'hidden';&#10;&#10;    // Preload first few images&#10;    const carnival = carnivalData[carnivalVersion];&#10;    if (carnival) {&#10;      carnival.images.slice(0, 3).forEach(img =&gt; {&#10;        const image = new Image();&#10;        image.src = img.src;&#10;      });&#10;    }&#10;&#10;    setTimeout(() =&gt; setIsLoading(false), 600);&#10;  }, []);&#10;&#10;  // Enhanced gallery closing&#10;  const closeGallery = useCallback(() =&gt; {&#10;    setIsGalleryOpen(false);&#10;    setActiveGallery(null);&#10;    setCurrentImageIndex(0);&#10;    document.body.style.overflow = 'unset';&#10;  }, []);&#10;&#10;  // Enhanced image navigation with preloading&#10;  const nextImage = useCallback(() =&gt; {&#10;    if (activeGallery &amp;&amp; carnivalData[activeGallery]) {&#10;      const images = carnivalData[activeGallery].images;&#10;      const nextIndex = currentImageIndex &lt; images.length - 1 ? currentImageIndex + 1 : 0;&#10;      setCurrentImageIndex(nextIndex);&#10;&#10;      // Preload next image&#10;      if (nextIndex + 1 &lt; images.length) {&#10;        const image = new Image();&#10;        image.src = images[nextIndex + 1].src;&#10;      }&#10;    }&#10;  }, [activeGallery, currentImageIndex]);&#10;&#10;  const prevImage = useCallback(() =&gt; {&#10;    if (activeGallery &amp;&amp; carnivalData[activeGallery]) {&#10;      const images = carnivalData[activeGallery].images;&#10;      const prevIndex = currentImageIndex &gt; 0 ? currentImageIndex - 1 : images.length - 1;&#10;      setCurrentImageIndex(prevIndex);&#10;&#10;      // Preload previous image&#10;      if (prevIndex - 1 &gt;= 0) {&#10;        const image = new Image();&#10;        image.src = images[prevIndex - 1].src;&#10;      }&#10;    }&#10;  }, [activeGallery, currentImageIndex]);&#10;&#10;  // Enhanced keyboard navigation&#10;  useEffect(() =&gt; {&#10;    const handleKeyPress = (e) =&gt; {&#10;      if (!isGalleryOpen) return;&#10;&#10;      switch (e.key) {&#10;        case 'Escape':&#10;          closeGallery();&#10;          break;&#10;        case 'ArrowLeft':&#10;          prevImage();&#10;          break;&#10;        case 'ArrowRight':&#10;          nextImage();&#10;          break;&#10;        case ' ':&#10;          e.preventDefault();&#10;          nextImage();&#10;          break;&#10;        default:&#10;          break;&#10;      }&#10;    };&#10;&#10;    window.addEventListener('keydown', handleKeyPress);&#10;    return () =&gt; window.removeEventListener('keydown', handleKeyPress);&#10;  }, [isGalleryOpen, closeGallery, nextImage, prevImage]);&#10;&#10;  // Enhanced touch/swipe functionality&#10;  const [touchStart, setTouchStart] = useState(null);&#10;  const [touchEnd, setTouchEnd] = useState(null);&#10;&#10;  const handleTouchStart = (e) =&gt; {&#10;    setTouchEnd(null);&#10;    setTouchStart(e.targetTouches[0].clientX);&#10;  };&#10;&#10;  const handleTouchMove = (e) =&gt; {&#10;    setTouchEnd(e.targetTouches[0].clientX);&#10;  };&#10;&#10;  const handleTouchEnd = useCallback(() =&gt; {&#10;    if (!touchStart || !touchEnd) return;&#10;&#10;    const distance = touchStart - touchEnd;&#10;    const isLeftSwipe = distance &gt; 50;&#10;    const isRightSwipe = distance &lt; -50;&#10;&#10;    if (isLeftSwipe) nextImage();&#10;    else if (isRightSwipe) prevImage();&#10;  }, [touchStart, touchEnd, nextImage, prevImage]);&#10;&#10;&#10;  // Fixed Roadmap Section Component&#10;  const RoadmapSection = ({ carnival, version, index }) =&gt; {&#10;    const isVisible = visibleSections.has(`carnival-${version}`);&#10;&#10;    return (&#10;      &lt;div&#10;        className={`${styles.roadmapSection} ${styles[carnival.position]} ${isVisible ? styles.visible : ''}`}&#10;        data-section={`carnival-${version}`}&#10;        style={{&#10;          animationDelay: `${index * 0.2}s`,&#10;          '--carnival-index': index&#10;        }}&#10;      &gt;&#10;        {/* Fixed Timeline connector - moved to avoid collision */}&#10;        &lt;div className={styles.timelineConnector}&gt;&#10;          &lt;div className={styles.yearBadge}&gt;&#10;            &lt;span className={styles.yearText}&gt;{carnival.year}&lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className={styles.timelineDot} style={{ backgroundColor: carnival.accentColor }}&gt;&#10;            &lt;Icon type={carnival.icon} size=&quot;medium&quot; /&gt;&#10;          &lt;/div&gt;&#10;          {index &lt; Object.keys(carnivalData).length - 1 &amp;&amp; (&#10;            &lt;div className={styles.timelineLine} style={{ backgroundColor: carnival.accentColor }}&gt;&lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Fixed carnival card positioning */}&#10;        &lt;div&#10;          className={styles.carnivalCard}&#10;          style={{ background: carnival.gradient }}&#10;          onClick={() =&gt; openGallery(version)}&#10;        &gt;&#10;          &lt;div className={styles.cardGlow} style={{ boxShadow: `0 0 50px ${carnival.accentColor}40` }}&gt;&lt;/div&gt;&#10;&#10;          &lt;div className={styles.cardHeader}&gt;&#10;            &lt;div className={styles.cardIcon}&gt;&#10;              &lt;Icon type={carnival.icon} size=&quot;large&quot; /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className={styles.cardYear}&gt;{carnival.year}&lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className={styles.cardContent}&gt;&#10;            &lt;h3 className={styles.carnivalTitle}&gt;{carnival.title}&lt;/h3&gt;&#10;            &lt;p className={styles.carnivalSubtitle}&gt;{carnival.subtitle}&lt;/p&gt;&#10;            &lt;p className={styles.carnivalDescription}&gt;{carnival.description}&lt;/p&gt;&#10;&#10;            {/* Enhanced stats section */}&#10;            &lt;div className={styles.carnivalStats}&gt;&#10;              &lt;div className={styles.stat}&gt;&#10;                &lt;span className={styles.statNumber}&gt;{carnival.stats.photos}&lt;/span&gt;&#10;                &lt;span className={styles.statLabel}&gt;Photos&lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className={styles.stat}&gt;&#10;                &lt;span className={styles.statNumber}&gt;{carnival.stats.events}&lt;/span&gt;&#10;                &lt;span className={styles.statLabel}&gt;Events&lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className={styles.stat}&gt;&#10;                &lt;span className={styles.statNumber}&gt;{carnival.stats.participants}&lt;/span&gt;&#10;                &lt;span className={styles.statLabel}&gt;Participants&lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className={styles.stat}&gt;&#10;                &lt;span className={styles.statNumber}&gt;{carnival.stats.duration}&lt;/span&gt;&#10;                &lt;span className={styles.statLabel}&gt;Duration&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Highlights section */}&#10;            &lt;div className={styles.highlights}&gt;&#10;              {carnival.highlights.map((highlight, idx) =&gt; (&#10;                &lt;span key={idx} className={styles.highlight}&gt;{highlight}&lt;/span&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;&#10;            &lt;button&#10;              className={styles.viewGalleryButton}&#10;              onClick={(e) =&gt; {&#10;                e.stopPropagation();&#10;                openGallery(version);&#10;              }}&#10;              aria-label={`View ${carnival.title} gallery`}&#10;            &gt;&#10;              &lt;span className={styles.buttonText}&gt;View Gallery&lt;/span&gt;&#10;              &lt;span className={styles.buttonIcon}&gt;&#10;                &lt;Icon type=&quot;camera&quot; size=&quot;medium&quot; /&gt;&#10;              &lt;/span&gt;&#10;              &lt;div className={styles.buttonRipple}&gt;&lt;/div&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  // Enhanced Gallery Modal Component&#10;  const GalleryModal = () =&gt; {&#10;    if (!isGalleryOpen || !activeGallery) return null;&#10;&#10;    const currentCarnival = carnivalData[activeGallery];&#10;    const currentImage = currentCarnival.images[currentImageIndex];&#10;    const totalImages = currentCarnival.images.length;&#10;&#10;    return (&#10;      &lt;div className={styles.galleryOverlay} onClick={closeGallery}&gt;&#10;        &lt;div className={styles.galleryModal} onClick={e =&gt; e.stopPropagation()}&gt;&#10;          {/* Enhanced Gallery Header */}&#10;          &lt;div className={styles.galleryHeader}&gt;&#10;            &lt;div className={styles.galleryInfo}&gt;&#10;              &lt;div className={styles.galleryTitle}&gt;&#10;                &lt;span className={styles.carnivalIcon}&gt;{currentCarnival.icon}&lt;/span&gt;&#10;                &lt;h3&gt;{currentCarnival.title}&lt;/h3&gt;&#10;                &lt;span className={styles.galleryYear}&gt;{currentCarnival.year}&lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className={styles.galleryMeta}&gt;&#10;                &lt;span className={styles.imageCounter}&gt;&#10;                  {currentImageIndex + 1} / {totalImages}&#10;                &lt;/span&gt;&#10;                &lt;div className={styles.progressBar}&gt;&#10;                  &lt;div&#10;                    className={styles.progressFill}&#10;                    style={{ width: `${((currentImageIndex + 1) / totalImages) * 100}%` }}&#10;                  &gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;button&#10;              className={styles.closeButton}&#10;              onClick={closeGallery}&#10;              aria-label=&quot;Close gallery&quot;&#10;            &gt;&#10;              &lt;span&gt;✕&lt;/span&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Enhanced Gallery Content */}&#10;          &lt;div&#10;            className={styles.galleryContent}&#10;            onTouchStart={handleTouchStart}&#10;            onTouchMove={handleTouchMove}&#10;            onTouchEnd={handleTouchEnd}&#10;          &gt;&#10;            {isLoading ? (&#10;              &lt;div className={styles.galleryLoader}&gt;&#10;                &lt;div className={styles.loader}&gt;&#10;                  &lt;div className={styles.loaderRing}&gt;&lt;/div&gt;&#10;                  &lt;div className={styles.loaderRing}&gt;&lt;/div&gt;&#10;                  &lt;div className={styles.loaderRing}&gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;p&gt;Loading amazing memories...&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            ) : (&#10;              &lt;&gt;&#10;                {/* Enhanced Navigation Arrows */}&#10;                &lt;button&#10;                  className={`${styles.navButton} ${styles.prevButton}`}&#10;                  onClick={prevImage}&#10;                  aria-label=&quot;Previous image&quot;&#10;                  disabled={currentImageIndex === 0}&#10;                &gt;&#10;                  &lt;span&gt;‹&lt;/span&gt;&#10;                &lt;/button&gt;&#10;&#10;                {/* Enhanced Image Container */}&#10;                &lt;div className={styles.imageContainer}&gt;&#10;                  &lt;img&#10;                    src={currentImage.src}&#10;                    alt={currentImage.alt}&#10;                    className={styles.galleryImage}&#10;                    loading=&quot;lazy&quot;&#10;                    onError={() =&gt; setImageLoadError(true)}&#10;                    onLoad={() =&gt; setImageLoadError(false)}&#10;                  /&gt;&#10;                  {imageLoadError &amp;&amp; (&#10;                    &lt;div className={styles.imageError}&gt;&#10;                      &lt;Icon type=&quot;camera&quot; size=&quot;large&quot; /&gt;&#10;                      &lt;p&gt;Unable to load image&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;button&#10;                  className={`${styles.navButton} ${styles.nextButton}`}&#10;                  onClick={nextImage}&#10;                  aria-label=&quot;Next image&quot;&#10;                  disabled={currentImageIndex === totalImages - 1}&#10;                &gt;&#10;                  &lt;span&gt;›&lt;/span&gt;&#10;                &lt;/button&gt;&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Enhanced Thumbnail Strip */}&#10;          &lt;div className={styles.thumbnailStrip}&gt;&#10;            &lt;div className={styles.thumbnailContainer}&gt;&#10;              {currentCarnival.images.map((image, index) =&gt; (&#10;                &lt;button&#10;                  key={image.id}&#10;                  className={`${styles.thumbnail} ${index === currentImageIndex ? styles.activeThumbnail : ''}`}&#10;                  onClick={() =&gt; setCurrentImageIndex(index)}&#10;                  style={{ animationDelay: `${index * 0.05}s` }}&#10;                &gt;&#10;                  &lt;img src={image.src} alt={`Thumbnail ${index + 1}`} /&gt;&#10;                  &lt;div className={styles.thumbnailOverlay}&gt;&#10;                    &lt;span&gt;{index + 1}&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/button&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  return (&#10;    &lt;div className={styles.galleryPage}&gt;&#10;      &lt;Header /&gt;&#10;&#10;      &lt;main className={styles.main}&gt;&#10;        {/* Enhanced Hero Section */}&#10;        &lt;section className={styles.heroSection} data-section=&quot;hero&quot;&gt;&#10;          &lt;div className={styles.heroBackground}&gt;&#10;            &lt;div className={styles.heroParticles}&gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className={styles.container}&gt;&#10;            &lt;div className={styles.heroContent}&gt;&#10;              &lt;h1 className={styles.pageTitle}&gt;&#10;                &lt;span className={styles.titleGradient}&gt;Best Memories&lt;/span&gt;&#10;                &lt;span className={styles.titleAccent}&gt;&#10;                  &lt;Icon type=&quot;sparkles&quot; size=&quot;large&quot; /&gt;&#10;                &lt;/span&gt;&#10;              &lt;/h1&gt;&#10;              &lt;p className={styles.pageSubtitle}&gt;&#10;                Journey through the evolution of AUST CSE Carnival - from humble beginnings to extraordinary celebrations&#10;              &lt;/p&gt;&#10;              &lt;div className={styles.heroStats}&gt;&#10;                &lt;div className={styles.heroStat}&gt;&#10;                  &lt;span className={styles.heroStatNumber}&gt;5&lt;/span&gt;&#10;                  &lt;span className={styles.heroStatLabel}&gt;Carnival Editions&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className={styles.heroStat}&gt;&#10;                  &lt;span className={styles.heroStatNumber}&gt;54+&lt;/span&gt;&#10;                  &lt;span className={styles.heroStatLabel}&gt;Total Photos&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className={styles.heroStat}&gt;&#10;                  &lt;span className={styles.heroStatNumber}&gt;5000+&lt;/span&gt;&#10;                  &lt;span className={styles.heroStatLabel}&gt;Memories Captured&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/section&gt;&#10;&#10;        {/* Enhanced Interactive Roadmap Timeline */}&#10;        &lt;section className={styles.roadmapTimeline} ref={roadmapRef} data-section=&quot;timeline&quot;&gt;&#10;          &lt;div className={styles.container}&gt;&#10;            &lt;div className={styles.timelineHeader}&gt;&#10;              &lt;h2 className={styles.timelineTitle}&gt;Our Carnival Journey&lt;/h2&gt;&#10;              &lt;p className={styles.timelineSubtitle}&gt;Click on any carnival to explore its gallery&lt;/p&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className={styles.roadmapContainer}&gt;&#10;              {Object.entries(carnivalData).map(([version, carnival], index) =&gt; (&#10;                &lt;RoadmapSection&#10;                  key={version}&#10;                  carnival={carnival}&#10;                  version={version}&#10;                  index={index}&#10;                /&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/section&gt;&#10;&#10;        {/* Enhanced Current Carnival Section */}&#10;        &lt;section className={styles.currentCarnival} data-section=&quot;current&quot;&gt;&#10;          &lt;div className={styles.container}&gt;&#10;            &lt;div className={styles.currentCard}&gt;&#10;              &lt;div className={styles.currentIcon}&gt;&#10;                &lt;Icon type=&quot;tent&quot; size=&quot;xxlarge&quot; /&gt;&#10;              &lt;/div&gt;&#10;              &lt;h2 className={styles.currentTitle}&gt;AUST CSE Carnival 5.0&lt;/h2&gt;&#10;              &lt;p className={styles.currentSubtitle}&gt;&#10;                The latest and most spectacular edition of our carnival journey, featuring cutting-edge technology and unforgettable experiences.&#10;              &lt;/p&gt;&#10;              &lt;button&#10;                className={styles.exploreButton}&#10;                onClick={() =&gt; openGallery('5.0')}&#10;              &gt;&#10;                Explore Latest Gallery&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/section&gt;&#10;&#10;        {/* Enhanced Magazines Section */}&#10;        &lt;section className={styles.magazinesSection} data-section=&quot;magazines&quot;&gt;&#10;          &lt;div className={styles.container}&gt;&#10;            &lt;div className={styles.magazineHeader}&gt;&#10;              &lt;h2 className={styles.sectionTitle}&gt;Digital Magazines&lt;/h2&gt;&#10;              &lt;p className={styles.sectionSubtitle}&gt;&#10;                Dive deep into our carnival stories through our comprehensive digital publications&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className={styles.magazineGrid}&gt;&#10;              {[&#10;                { id: 1, title: &quot;Digital Innovation Handbook&quot;, year: &quot;2025&quot;, color: &quot;#2ec095&quot; },&#10;                { id: 2, title: &quot;Tech Excellence Magazine&quot;, year: &quot;2024&quot;, color: &quot;#03624c&quot; },&#10;                { id: 3, title: &quot;Future Leaders Journal&quot;, year: &quot;2023&quot;, color: &quot;#042222&quot; }&#10;              ].map((mag) =&gt; (&#10;                &lt;div key={mag.id} className={styles.magazineCard} style={{ '--accent-color': mag.color }}&gt;&#10;                  &lt;div className={styles.magazineCover}&gt;&#10;                    &lt;div className={styles.magazineGlow}&gt;&lt;/div&gt;&#10;                    &lt;div className={styles.magazineContent}&gt;&#10;                      &lt;div className={styles.magazineYear}&gt;{mag.year}&lt;/div&gt;&#10;                      &lt;h3&gt;{mag.title}&lt;/h3&gt;&#10;                      &lt;p&gt;CSE Carnival Edition {mag.id}&lt;/p&gt;&#10;                      &lt;div className={styles.magazineButton}&gt;&#10;                        &lt;span&gt;Read More&lt;/span&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/section&gt;&#10;      &lt;/main&gt;&#10;&#10;      &lt;Footer /&gt;&#10;&#10;      {/* Gallery Modal */}&#10;      &lt;GalleryModal /&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Gallery;&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect, useRef, useCallback } from 'react';&#13;&#10;import Header from '../../components/header/Header';&#13;&#10;import Footer from '../../components/footer/Footer';&#13;&#10;import Icon from '../../components/common/Icon';&#13;&#10;import styles from './Gallery.module.css';&#13;&#10;&#13;&#10;// Import carnival images with proper error handling and correct paths&#13;&#10;const importCarnivalImages = (carnivalVersion, count) =&gt; {&#13;&#10;  const images = [];&#13;&#10;  for (let i = 1; i &lt;= count; i++) {&#13;&#10;    images.push({&#13;&#10;      src: `/src/assets/images/carnivals/Carnival ${carnivalVersion}.0/carnival_${carnivalVersion}_img_${i}.jpg`,&#13;&#10;      alt: `AUST CSE Carnival ${carnivalVersion}.0 - Memory ${i}`,&#13;&#10;      id: `carnival_${carnivalVersion}_${i}`,&#13;&#10;      thumbnail: `/src/assets/images/carnivals/Carnival ${carnivalVersion}.0/carnival_${carnivalVersion}_img_${i}.jpg`&#13;&#10;    });&#13;&#10;  }&#13;&#10;  return images;&#13;&#10;};&#13;&#10;&#13;&#10;// Enhanced carnival data with comprehensive information&#13;&#10;const carnivalData = {&#13;&#10;  &quot;1.0&quot;: {&#13;&#10;    title: &quot;Integer 43&quot;,&#13;&#10;    subtitle: &quot;The Pioneer Journey Begins&quot;,&#13;&#10;    description: &quot;The very first AUST CSE Carnival that started our amazing tradition of innovation and technology celebration.&quot;,&#13;&#10;    year: &quot;2021&quot;,&#13;&#10;    gradient: &quot;linear-gradient(135deg, var(--color-secondary-dark) 0%, var(--color-accent-dark) 100%)&quot;,&#13;&#10;    accentColor: &quot;#03624c&quot;,&#13;&#10;    icon: &quot;rocket&quot;,&#13;&#10;    position: &quot;left&quot;,&#13;&#10;    images: importCarnivalImages(&quot;1&quot;, 18),&#13;&#10;    stats: { photos: 18, events: 5, participants: &quot;500+&quot;, duration: &quot;3 days&quot; },&#13;&#10;    highlights: [&quot;First Ever Carnival&quot;, &quot;Programming Contest&quot;, &quot;Tech Exhibition&quot;]&#13;&#10;  },&#13;&#10;  &quot;2.0&quot;: {&#13;&#10;    title: &quot;Decipher 44&quot;,&#13;&#10;    subtitle: &quot;Continuing the Legacy&quot;,&#13;&#10;    description: &quot;Building upon our foundation with expanded events and greater participation from the tech community.&quot;,&#13;&#10;    year: &quot;2022&quot;,&#13;&#10;    gradient: &quot;linear-gradient(135deg, var(--color-accent-dark) 0%, var(--color-accent-bright) 100%)&quot;,&#13;&#10;    accentColor: &quot;#2ec095&quot;,&#13;&#10;    icon: &quot;target&quot;,&#13;&#10;    position: &quot;right&quot;,&#13;&#10;    images: importCarnivalImages(&quot;2&quot;, 6),&#13;&#10;    stats: { photos: 6, events: 6, participants: &quot;750+&quot;, duration: &quot;3 days&quot; },&#13;&#10;    highlights: [&quot;UI/UX Competition&quot;, &quot;Hackathon&quot;, &quot;AI Workshop&quot;]&#13;&#10;  },&#13;&#10;  &quot;3.0&quot;: {&#13;&#10;    title: &quot;Qubits 45&quot;,&#13;&#10;    subtitle: &quot;Setting New Benchmarks&quot;,&#13;&#10;    description: &quot;A quantum leap in carnival excellence with cutting-edge competitions and industry partnerships.&quot;,&#13;&#10;    year: &quot;2023&quot;,&#13;&#10;    gradient: &quot;linear-gradient(135deg, var(--color-primary-dark) 0%, var(--color-secondary-dark) 100%)&quot;,&#13;&#10;    accentColor: &quot;#042222&quot;,&#13;&#10;    icon: &quot;star&quot;,&#13;&#10;    position: &quot;left&quot;,&#13;&#10;    images: importCarnivalImages(&quot;3&quot;, 8),&#13;&#10;    stats: { photos: 8, events: 7, participants: &quot;1000+&quot;, duration: &quot;4 days&quot; },&#13;&#10;    highlights: [&quot;Quantum Computing&quot;, &quot;Robotics Showcase&quot;, &quot;Startup Pitch&quot;]&#13;&#10;  },&#13;&#10;  &quot;4.0&quot;: {&#13;&#10;    title: &quot;Carnival 4.0&quot;,&#13;&#10;    subtitle: &quot;Innovation at Its Peak&quot;,&#13;&#10;    description: &quot;The fourth iteration brought revolutionary changes with international participation and advanced tech demos.&quot;,&#13;&#10;    year: &quot;2024&quot;,&#13;&#10;    gradient: &quot;linear-gradient(135deg, var(--color-accent-bright) 0%, var(--color-accent-dark) 100%)&quot;,&#13;&#10;    accentColor: &quot;#2ec095&quot;,&#13;&#10;    icon: &quot;tent&quot;,&#13;&#10;    position: &quot;right&quot;,&#13;&#10;    images: importCarnivalImages(&quot;4&quot;, 10),&#13;&#10;    stats: { photos: 10, events: 8, participants: &quot;1200+&quot;, duration: &quot;4 days&quot; },&#13;&#10;    highlights: [&quot;International Speakers&quot;, &quot;VR/AR Demos&quot;, &quot;Blockchain Workshop&quot;]&#13;&#10;  },&#13;&#10;  &quot;5.0&quot;: {&#13;&#10;    title: &quot;Carnival 5.0&quot;,&#13;&#10;    subtitle: &quot;The Future is Here&quot;,&#13;&#10;    description: &quot;Our most ambitious carnival yet, showcasing the latest in AI, machine learning, and emerging technologies.&quot;,&#13;&#10;    year: &quot;2025&quot;,&#13;&#10;    gradient: &quot;linear-gradient(135deg, var(--color-secondary-dark) 0%, var(--color-accent-bright) 100%)&quot;,&#13;&#10;    accentColor: &quot;#2ec095&quot;,&#13;&#10;    icon: &quot;sparkles&quot;,&#13;&#10;    position: &quot;left&quot;,&#13;&#10;    images: importCarnivalImages(&quot;5&quot;, 12),&#13;&#10;    stats: { photos: 12, events: 10, participants: &quot;1500+&quot;, duration: &quot;5 days&quot; },&#13;&#10;    highlights: [&quot;AI Revolution&quot;, &quot;Metaverse Expo&quot;, &quot;Global Tech Summit&quot;]&#13;&#10;  }&#13;&#10;};&#13;&#10;&#13;&#10;const Gallery = () =&gt; {&#13;&#10;  const [activeGallery, setActiveGallery] = useState(null);&#13;&#10;  const [currentImageIndex, setCurrentImageIndex] = useState(0);&#13;&#10;  const [isGalleryOpen, setIsGalleryOpen] = useState(false);&#13;&#10;  const [isLoading, setIsLoading] = useState(false);&#13;&#10;  const [imageLoadError, setImageLoadError] = useState(false);&#13;&#10;  const [visibleSections, setVisibleSections] = useState(new Set(['hero'])); // Initialize with hero visible&#13;&#10;&#13;&#10;  const roadmapRef = useRef(null);&#13;&#10;  const observerRef = useRef(null);&#13;&#10;&#13;&#10;  // Fixed Intersection Observer for scroll animations - completely rewritten&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    // Cleanup any existing observer&#13;&#10;    if (observerRef.current) {&#13;&#10;      observerRef.current.disconnect();&#13;&#10;    }&#13;&#10;&#13;&#10;    // Create a more reliable intersection observer&#13;&#10;    const observerCallback = (entries) =&gt; {&#13;&#10;      entries.forEach((entry) =&gt; {&#13;&#10;        const sectionId = entry.target.getAttribute('data-section');&#13;&#10;        if (sectionId) {&#13;&#10;          if (entry.isIntersecting) {&#13;&#10;            setVisibleSections(prev =&gt; {&#13;&#10;              const newSet = new Set(prev);&#13;&#10;              newSet.add(sectionId);&#13;&#10;              console.log('Section visible:', sectionId); // Debug log&#13;&#10;              return newSet;&#13;&#10;            });&#13;&#10;          }&#13;&#10;        }&#13;&#10;      });&#13;&#10;    };&#13;&#10;&#13;&#10;    observerRef.current = new IntersectionObserver(observerCallback, {&#13;&#10;      threshold: 0.1,&#13;&#10;      rootMargin: '50px 0px -20px 0px'&#13;&#10;    });&#13;&#10;&#13;&#10;    // Wait for DOM to be fully ready, then observe elements&#13;&#10;    const observeElements = () =&gt; {&#13;&#10;      const sections = document.querySelectorAll('[data-section]');&#13;&#10;      console.log('Found sections:', sections.length); // Debug log&#13;&#10;&#13;&#10;      sections.forEach((section) =&gt; {&#13;&#10;        if (section &amp;&amp; observerRef.current) {&#13;&#10;          observerRef.current.observe(section);&#13;&#10;          console.log('Observing section:', section.getAttribute('data-section')); // Debug log&#13;&#10;        }&#13;&#10;      });&#13;&#10;    };&#13;&#10;&#13;&#10;    // Use a longer delay and also try on next tick&#13;&#10;    const timer1 = setTimeout(observeElements, 200);&#13;&#10;    const timer2 = setTimeout(observeElements, 500);&#13;&#10;&#13;&#10;    // Also try on next animation frame&#13;&#10;    requestAnimationFrame(() =&gt; {&#13;&#10;      setTimeout(observeElements, 100);&#13;&#10;    });&#13;&#10;&#13;&#10;    return () =&gt; {&#13;&#10;      clearTimeout(timer1);&#13;&#10;      clearTimeout(timer2);&#13;&#10;      if (observerRef.current) {&#13;&#10;        observerRef.current.disconnect();&#13;&#10;      }&#13;&#10;    };&#13;&#10;  }, []); // Keep empty dependency array&#13;&#10;&#13;&#10;  // Force visibility check on mount and scroll&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    const handleScroll = () =&gt; {&#13;&#10;      const sections = document.querySelectorAll('[data-section]');&#13;&#10;      sections.forEach(section =&gt; {&#13;&#10;        const rect = section.getBoundingClientRect();&#13;&#10;        const isVisible = rect.top &lt; window.innerHeight &amp;&amp; rect.bottom &gt; 0;&#13;&#10;&#13;&#10;        if (isVisible) {&#13;&#10;          const sectionId = section.getAttribute('data-section');&#13;&#10;          if (sectionId) {&#13;&#10;            setVisibleSections(prev =&gt; {&#13;&#10;              const newSet = new Set(prev);&#13;&#10;              newSet.add(sectionId);&#13;&#10;              return newSet;&#13;&#10;            });&#13;&#10;          }&#13;&#10;        }&#13;&#10;      });&#13;&#10;    };&#13;&#10;&#13;&#10;    // Initial check&#13;&#10;    setTimeout(handleScroll, 100);&#13;&#10;&#13;&#10;    // Add scroll listener as backup&#13;&#10;    window.addEventListener('scroll', handleScroll, { passive: true });&#13;&#10;&#13;&#10;    return () =&gt; {&#13;&#10;      window.removeEventListener('scroll', handleScroll);&#13;&#10;    };&#13;&#10;  }, []);&#13;&#10;&#13;&#10;  // Enhanced gallery opening with preloading&#13;&#10;  const openGallery = useCallback((carnivalVersion) =&gt; {&#13;&#10;    setIsLoading(true);&#13;&#10;    setImageLoadError(false);&#13;&#10;    setActiveGallery(carnivalVersion);&#13;&#10;    setCurrentImageIndex(0);&#13;&#10;    setIsGalleryOpen(true);&#13;&#10;    document.body.style.overflow = 'hidden';&#13;&#10;&#13;&#10;    // Preload first few images&#13;&#10;    const carnival = carnivalData[carnivalVersion];&#13;&#10;    if (carnival) {&#13;&#10;      carnival.images.slice(0, 3).forEach(img =&gt; {&#13;&#10;        const image = new Image();&#13;&#10;        image.src = img.src;&#13;&#10;      });&#13;&#10;    }&#13;&#10;&#13;&#10;    setTimeout(() =&gt; setIsLoading(false), 600);&#13;&#10;  }, []);&#13;&#10;&#13;&#10;  // Enhanced gallery closing&#13;&#10;  const closeGallery = useCallback(() =&gt; {&#13;&#10;    setIsGalleryOpen(false);&#13;&#10;    setActiveGallery(null);&#13;&#10;    setCurrentImageIndex(0);&#13;&#10;    document.body.style.overflow = 'unset';&#13;&#10;  }, []);&#13;&#10;&#13;&#10;  // Enhanced image navigation with preloading&#13;&#10;  const nextImage = useCallback(() =&gt; {&#13;&#10;    if (activeGallery &amp;&amp; carnivalData[activeGallery]) {&#13;&#10;      const images = carnivalData[activeGallery].images;&#13;&#10;      const nextIndex = currentImageIndex &lt; images.length - 1 ? currentImageIndex + 1 : 0;&#13;&#10;      setCurrentImageIndex(nextIndex);&#13;&#10;&#13;&#10;      // Preload next image&#13;&#10;      if (nextIndex + 1 &lt; images.length) {&#13;&#10;        const image = new Image();&#13;&#10;        image.src = images[nextIndex + 1].src;&#13;&#10;      }&#13;&#10;    }&#13;&#10;  }, [activeGallery, currentImageIndex]);&#13;&#10;&#13;&#10;  const prevImage = useCallback(() =&gt; {&#13;&#10;    if (activeGallery &amp;&amp; carnivalData[activeGallery]) {&#13;&#10;      const images = carnivalData[activeGallery].images;&#13;&#10;      const prevIndex = currentImageIndex &gt; 0 ? currentImageIndex - 1 : images.length - 1;&#13;&#10;      setCurrentImageIndex(prevIndex);&#13;&#10;&#13;&#10;      // Preload previous image&#13;&#10;      if (prevIndex - 1 &gt;= 0) {&#13;&#10;        const image = new Image();&#13;&#10;        image.src = images[prevIndex - 1].src;&#13;&#10;      }&#13;&#10;    }&#13;&#10;  }, [activeGallery, currentImageIndex]);&#13;&#10;&#13;&#10;  // Enhanced keyboard navigation&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    const handleKeyPress = (e) =&gt; {&#13;&#10;      if (!isGalleryOpen) return;&#13;&#10;&#13;&#10;      switch (e.key) {&#13;&#10;        case 'Escape':&#13;&#10;          closeGallery();&#13;&#10;          break;&#13;&#10;        case 'ArrowLeft':&#13;&#10;          prevImage();&#13;&#10;          break;&#13;&#10;        case 'ArrowRight':&#13;&#10;          nextImage();&#13;&#10;          break;&#13;&#10;        case ' ':&#13;&#10;          e.preventDefault();&#13;&#10;          nextImage();&#13;&#10;          break;&#13;&#10;        default:&#13;&#10;          break;&#13;&#10;      }&#13;&#10;    };&#13;&#10;&#13;&#10;    window.addEventListener('keydown', handleKeyPress);&#13;&#10;    return () =&gt; window.removeEventListener('keydown', handleKeyPress);&#13;&#10;  }, [isGalleryOpen, closeGallery, nextImage, prevImage]);&#13;&#10;&#13;&#10;  // Enhanced touch/swipe functionality&#13;&#10;  const [touchStart, setTouchStart] = useState(null);&#13;&#10;  const [touchEnd, setTouchEnd] = useState(null);&#13;&#10;&#13;&#10;  const handleTouchStart = (e) =&gt; {&#13;&#10;    setTouchEnd(null);&#13;&#10;    setTouchStart(e.targetTouches[0].clientX);&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleTouchMove = (e) =&gt; {&#13;&#10;    setTouchEnd(e.targetTouches[0].clientX);&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleTouchEnd = useCallback(() =&gt; {&#13;&#10;    if (!touchStart || !touchEnd) return;&#13;&#10;&#13;&#10;    const distance = touchStart - touchEnd;&#13;&#10;    const isLeftSwipe = distance &gt; 50;&#13;&#10;    const isRightSwipe = distance &lt; -50;&#13;&#10;&#13;&#10;    if (isLeftSwipe) nextImage();&#13;&#10;    else if (isRightSwipe) prevImage();&#13;&#10;  }, [touchStart, touchEnd, nextImage, prevImage]);&#13;&#10;&#13;&#10;&#13;&#10;  // Fixed Roadmap Section Component&#13;&#10;  const RoadmapSection = ({ carnival, version, index }) =&gt; {&#13;&#10;    const isVisible = visibleSections.has(`carnival-${version}`);&#13;&#10;&#13;&#10;    return (&#13;&#10;      &lt;div&#13;&#10;        className={`${styles.roadmapSection} ${styles[carnival.position]} ${isVisible ? styles.visible : ''}`}&#13;&#10;        data-section={`carnival-${version}`}&#13;&#10;        style={{&#13;&#10;          animationDelay: `${index * 0.2}s`,&#13;&#10;          '--carnival-index': index&#13;&#10;        }}&#13;&#10;      &gt;&#13;&#10;        {/* Fixed Timeline connector - moved to avoid collision */}&#13;&#10;        &lt;div className={styles.timelineConnector}&gt;&#13;&#10;          &lt;div className={styles.yearBadge}&gt;&#13;&#10;            &lt;span className={styles.yearText}&gt;{carnival.year}&lt;/span&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;          &lt;div className={styles.timelineDot} style={{ backgroundColor: carnival.accentColor }}&gt;&#13;&#10;            &lt;Icon type={carnival.icon} size=&quot;medium&quot; /&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;          {index &lt; Object.keys(carnivalData).length - 1 &amp;&amp; (&#13;&#10;            &lt;div className={styles.timelineLine} style={{ backgroundColor: carnival.accentColor }}&gt;&lt;/div&gt;&#13;&#10;          )}&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        {/* Fixed carnival card positioning */}&#13;&#10;        &lt;div&#13;&#10;          className={styles.carnivalCard}&#13;&#10;          style={{ background: carnival.gradient }}&#13;&#10;          onClick={() =&gt; openGallery(version)}&#13;&#10;        &gt;&#13;&#10;          &lt;div className={styles.cardGlow} style={{ boxShadow: `0 0 50px ${carnival.accentColor}40` }}&gt;&lt;/div&gt;&#13;&#10;&#13;&#10;          &lt;div className={styles.cardHeader}&gt;&#13;&#10;            &lt;div className={styles.cardIcon}&gt;&#13;&#10;              &lt;Icon type={carnival.icon} size=&quot;large&quot; /&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;div className={styles.cardYear}&gt;{carnival.year}&lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          &lt;div className={styles.cardContent}&gt;&#13;&#10;            &lt;h3 className={styles.carnivalTitle}&gt;{carnival.title}&lt;/h3&gt;&#13;&#10;            &lt;p className={styles.carnivalSubtitle}&gt;{carnival.subtitle}&lt;/p&gt;&#13;&#10;            &lt;p className={styles.carnivalDescription}&gt;{carnival.description}&lt;/p&gt;&#13;&#10;&#13;&#10;            {/* Enhanced stats section */}&#13;&#10;            &lt;div className={styles.carnivalStats}&gt;&#13;&#10;              &lt;div className={styles.stat}&gt;&#13;&#10;                &lt;span className={styles.statNumber}&gt;{carnival.stats.photos}&lt;/span&gt;&#13;&#10;                &lt;span className={styles.statLabel}&gt;Photos&lt;/span&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;              &lt;div className={styles.stat}&gt;&#13;&#10;                &lt;span className={styles.statNumber}&gt;{carnival.stats.events}&lt;/span&gt;&#13;&#10;                &lt;span className={styles.statLabel}&gt;Events&lt;/span&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;              &lt;div className={styles.stat}&gt;&#13;&#10;                &lt;span className={styles.statNumber}&gt;{carnival.stats.participants}&lt;/span&gt;&#13;&#10;                &lt;span className={styles.statLabel}&gt;Participants&lt;/span&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;              &lt;div className={styles.stat}&gt;&#13;&#10;                &lt;span className={styles.statNumber}&gt;{carnival.stats.duration}&lt;/span&gt;&#13;&#10;                &lt;span className={styles.statLabel}&gt;Duration&lt;/span&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            {/* Highlights section */}&#13;&#10;            &lt;div className={styles.highlights}&gt;&#13;&#10;              {carnival.highlights.map((highlight, idx) =&gt; (&#13;&#10;                &lt;span key={idx} className={styles.highlight}&gt;{highlight}&lt;/span&gt;&#13;&#10;              ))}&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            &lt;button&#13;&#10;              className={styles.viewGalleryButton}&#13;&#10;              onClick={(e) =&gt; {&#13;&#10;                e.stopPropagation();&#13;&#10;                openGallery(version);&#13;&#10;              }}&#13;&#10;              aria-label={`View ${carnival.title} gallery`}&#13;&#10;            &gt;&#13;&#10;              &lt;span className={styles.buttonText}&gt;View Gallery&lt;/span&gt;&#13;&#10;              &lt;span className={styles.buttonIcon}&gt;&#13;&#10;                &lt;Icon type=&quot;camera&quot; size=&quot;medium&quot; /&gt;&#13;&#10;              &lt;/span&gt;&#13;&#10;              &lt;div className={styles.buttonRipple}&gt;&lt;/div&gt;&#13;&#10;            &lt;/button&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    );&#13;&#10;  };&#13;&#10;&#13;&#10;  // Enhanced Gallery Modal Component&#13;&#10;  const GalleryModal = () =&gt; {&#13;&#10;    if (!isGalleryOpen || !activeGallery) return null;&#13;&#10;&#13;&#10;    const currentCarnival = carnivalData[activeGallery];&#13;&#10;    const currentImage = currentCarnival.images[currentImageIndex];&#13;&#10;    const totalImages = currentCarnival.images.length;&#13;&#10;&#13;&#10;    return (&#13;&#10;      &lt;div className={styles.galleryOverlay} onClick={closeGallery}&gt;&#13;&#10;        &lt;div className={styles.galleryModal} onClick={e =&gt; e.stopPropagation()}&gt;&#13;&#10;          {/* Enhanced Gallery Header */}&#13;&#10;          &lt;div className={styles.galleryHeader}&gt;&#13;&#10;            &lt;div className={styles.galleryInfo}&gt;&#13;&#10;              &lt;div className={styles.galleryTitle}&gt;&#13;&#10;                &lt;span className={styles.carnivalIcon}&gt;{currentCarnival.icon}&lt;/span&gt;&#13;&#10;                &lt;h3&gt;{currentCarnival.title}&lt;/h3&gt;&#13;&#10;                &lt;span className={styles.galleryYear}&gt;{currentCarnival.year}&lt;/span&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;              &lt;div className={styles.galleryMeta}&gt;&#13;&#10;                &lt;span className={styles.imageCounter}&gt;&#13;&#10;                  {currentImageIndex + 1} / {totalImages}&#13;&#10;                &lt;/span&gt;&#13;&#10;                &lt;div className={styles.progressBar}&gt;&#13;&#10;                  &lt;div&#13;&#10;                    className={styles.progressFill}&#13;&#10;                    style={{ width: `${((currentImageIndex + 1) / totalImages) * 100}%` }}&#13;&#10;                  &gt;&lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;button&#13;&#10;              className={styles.closeButton}&#13;&#10;              onClick={closeGallery}&#13;&#10;              aria-label=&quot;Close gallery&quot;&#13;&#10;            &gt;&#13;&#10;              &lt;span&gt;✕&lt;/span&gt;&#13;&#10;            &lt;/button&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          {/* Enhanced Gallery Content */}&#13;&#10;          &lt;div&#13;&#10;            className={styles.galleryContent}&#13;&#10;            onTouchStart={handleTouchStart}&#13;&#10;            onTouchMove={handleTouchMove}&#13;&#10;            onTouchEnd={handleTouchEnd}&#13;&#10;          &gt;&#13;&#10;            {isLoading ? (&#13;&#10;              &lt;div className={styles.galleryLoader}&gt;&#13;&#10;                &lt;div className={styles.loader}&gt;&#13;&#10;                  &lt;div className={styles.loaderRing}&gt;&lt;/div&gt;&#13;&#10;                  &lt;div className={styles.loaderRing}&gt;&lt;/div&gt;&#13;&#10;                  &lt;div className={styles.loaderRing}&gt;&lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;p&gt;Loading amazing memories...&lt;/p&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            ) : (&#13;&#10;              &lt;&gt;&#13;&#10;                {/* Enhanced Navigation Arrows */}&#13;&#10;                &lt;button&#13;&#10;                  className={`${styles.navButton} ${styles.prevButton}`}&#13;&#10;                  onClick={prevImage}&#13;&#10;                  aria-label=&quot;Previous image&quot;&#13;&#10;                  disabled={currentImageIndex === 0}&#13;&#10;                &gt;&#13;&#10;                  &lt;span&gt;‹&lt;/span&gt;&#13;&#10;                &lt;/button&gt;&#13;&#10;&#13;&#10;                {/* Enhanced Image Container */}&#13;&#10;                &lt;div className={styles.imageContainer}&gt;&#13;&#10;                  &lt;img&#13;&#10;                    src={currentImage.src}&#13;&#10;                    alt={currentImage.alt}&#13;&#10;                    className={styles.galleryImage}&#13;&#10;                    loading=&quot;lazy&quot;&#13;&#10;                    onError={() =&gt; setImageLoadError(true)}&#13;&#10;                    onLoad={() =&gt; setImageLoadError(false)}&#13;&#10;                  /&gt;&#13;&#10;                  {imageLoadError &amp;&amp; (&#13;&#10;                    &lt;div className={styles.imageError}&gt;&#13;&#10;                      &lt;Icon type=&quot;camera&quot; size=&quot;large&quot; /&gt;&#13;&#10;                      &lt;p&gt;Unable to load image&lt;/p&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  )}&#13;&#10;                &lt;/div&gt;&#13;&#10;&#13;&#10;                &lt;button&#13;&#10;                  className={`${styles.navButton} ${styles.nextButton}`}&#13;&#10;                  onClick={nextImage}&#13;&#10;                  aria-label=&quot;Next image&quot;&#13;&#10;                  disabled={currentImageIndex === totalImages - 1}&#13;&#10;                &gt;&#13;&#10;                  &lt;span&gt;›&lt;/span&gt;&#13;&#10;                &lt;/button&gt;&#13;&#10;              &lt;/&gt;&#13;&#10;            )}&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          {/* Enhanced Thumbnail Strip */}&#13;&#10;          &lt;div className={styles.thumbnailStrip}&gt;&#13;&#10;            &lt;div className={styles.thumbnailContainer}&gt;&#13;&#10;              {currentCarnival.images.map((image, index) =&gt; (&#13;&#10;                &lt;button&#13;&#10;                  key={image.id}&#13;&#10;                  className={`${styles.thumbnail} ${index === currentImageIndex ? styles.activeThumbnail : ''}`}&#13;&#10;                  onClick={() =&gt; setCurrentImageIndex(index)}&#13;&#10;                  style={{ animationDelay: `${index * 0.05}s` }}&#13;&#10;                &gt;&#13;&#10;                  &lt;img src={image.src} alt={`Thumbnail ${index + 1}`} /&gt;&#13;&#10;                  &lt;div className={styles.thumbnailOverlay}&gt;&#13;&#10;                    &lt;span&gt;{index + 1}&lt;/span&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                &lt;/button&gt;&#13;&#10;              ))}&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    );&#13;&#10;  };&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className={styles.galleryPage}&gt;&#13;&#10;      &lt;Header /&gt;&#13;&#10;&#13;&#10;      &lt;main className={styles.main}&gt;&#13;&#10;        {/* Enhanced Hero Section */}&#13;&#10;        &lt;section className={styles.heroSection} data-section=&quot;hero&quot;&gt;&#13;&#10;          &lt;div className={styles.heroBackground}&gt;&#13;&#10;            &lt;div className={styles.heroParticles}&gt;&lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;          &lt;div className={styles.container}&gt;&#13;&#10;            &lt;div className={styles.heroContent}&gt;&#13;&#10;              &lt;h1 className={styles.pageTitle}&gt;&#13;&#10;                &lt;span className={styles.titleGradient}&gt;Best Memories&lt;/span&gt;&#13;&#10;                &lt;span className={styles.titleAccent}&gt;&#13;&#10;                  &lt;Icon type=&quot;sparkles&quot; size=&quot;large&quot; /&gt;&#13;&#10;                &lt;/span&gt;&#13;&#10;              &lt;/h1&gt;&#13;&#10;              &lt;p className={styles.pageSubtitle}&gt;&#13;&#10;                Journey through the evolution of AUST CSE Carnival - from humble beginnings to extraordinary celebrations&#13;&#10;              &lt;/p&gt;&#13;&#10;              &lt;div className={styles.heroStats}&gt;&#13;&#10;                &lt;div className={styles.heroStat}&gt;&#13;&#10;                  &lt;span className={styles.heroStatNumber}&gt;5&lt;/span&gt;&#13;&#10;                  &lt;span className={styles.heroStatLabel}&gt;Carnival Editions&lt;/span&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;div className={styles.heroStat}&gt;&#13;&#10;                  &lt;span className={styles.heroStatNumber}&gt;54+&lt;/span&gt;&#13;&#10;                  &lt;span className={styles.heroStatLabel}&gt;Total Photos&lt;/span&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;div className={styles.heroStat}&gt;&#13;&#10;                  &lt;span className={styles.heroStatNumber}&gt;5000+&lt;/span&gt;&#13;&#10;                  &lt;span className={styles.heroStatLabel}&gt;Memories Captured&lt;/span&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/section&gt;&#13;&#10;&#13;&#10;        {/* Enhanced Interactive Roadmap Timeline */}&#13;&#10;        &lt;section className={styles.roadmapTimeline} ref={roadmapRef} data-section=&quot;timeline&quot;&gt;&#13;&#10;          &lt;div className={styles.container}&gt;&#13;&#10;            &lt;div className={styles.timelineHeader}&gt;&#13;&#10;              &lt;h2 className={styles.timelineTitle}&gt;Our Carnival Journey&lt;/h2&gt;&#13;&#10;              &lt;p className={styles.timelineSubtitle}&gt;Click on any carnival to explore its gallery&lt;/p&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            &lt;div className={styles.roadmapContainer}&gt;&#13;&#10;              {Object.entries(carnivalData).map(([version, carnival], index) =&gt; (&#13;&#10;                &lt;RoadmapSection&#13;&#10;                  key={version}&#13;&#10;                  carnival={carnival}&#13;&#10;                  version={version}&#13;&#10;                  index={index}&#13;&#10;                /&gt;&#13;&#10;              ))}&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/section&gt;&#13;&#10;&#13;&#10;        {/* Enhanced Current Carnival Section */}&#13;&#10;        &lt;section className={styles.currentCarnival} data-section=&quot;current&quot;&gt;&#13;&#10;          &lt;div className={styles.container}&gt;&#13;&#10;            &lt;div className={styles.currentCard}&gt;&#13;&#10;              &lt;div className={styles.currentIcon}&gt;&#13;&#10;                &lt;Icon type=&quot;tent&quot; size=&quot;xxlarge&quot; /&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;              &lt;h2 className={styles.currentTitle}&gt;AUST CSE Carnival 5.0&lt;/h2&gt;&#13;&#10;              &lt;p className={styles.currentSubtitle}&gt;&#13;&#10;                The latest and most spectacular edition of our carnival journey, featuring cutting-edge technology and unforgettable experiences.&#13;&#10;              &lt;/p&gt;&#13;&#10;              &lt;button&#13;&#10;                className={styles.exploreButton}&#13;&#10;                onClick={() =&gt; openGallery('5.0')}&#13;&#10;              &gt;&#13;&#10;                Explore Latest Gallery&#13;&#10;              &lt;/button&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/section&gt;&#13;&#10;&#13;&#10;        {/* Enhanced Magazines Section */}&#13;&#10;        &lt;section className={styles.magazinesSection} data-section=&quot;magazines&quot;&gt;&#13;&#10;          &lt;div className={styles.container}&gt;&#13;&#10;            &lt;div className={styles.magazineHeader}&gt;&#13;&#10;              &lt;h2 className={styles.sectionTitle}&gt;Digital Magazines&lt;/h2&gt;&#13;&#10;              &lt;p className={styles.sectionSubtitle}&gt;&#13;&#10;                Dive deep into our carnival stories through our comprehensive digital publications&#13;&#10;              &lt;/p&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            &lt;div className={styles.magazineGrid}&gt;&#13;&#10;              {[&#13;&#10;                { id: 1, title: &quot;Digital Innovation Handbook&quot;, year: &quot;2025&quot;, color: &quot;#2ec095&quot; },&#13;&#10;                { id: 2, title: &quot;Tech Excellence Magazine&quot;, year: &quot;2024&quot;, color: &quot;#03624c&quot; },&#13;&#10;                { id: 3, title: &quot;Future Leaders Journal&quot;, year: &quot;2023&quot;, color: &quot;#042222&quot; }&#13;&#10;              ].map((mag) =&gt; (&#13;&#10;                &lt;div key={mag.id} className={styles.magazineCard} style={{ '--accent-color': mag.color }}&gt;&#13;&#10;                  &lt;div className={styles.magazineCover}&gt;&#13;&#10;                    &lt;div className={styles.magazineGlow}&gt;&lt;/div&gt;&#13;&#10;                    &lt;div className={styles.magazineContent}&gt;&#13;&#10;                      &lt;div className={styles.magazineYear}&gt;{mag.year}&lt;/div&gt;&#13;&#10;                      &lt;h3&gt;{mag.title}&lt;/h3&gt;&#13;&#10;                      &lt;p&gt;CSE Carnival Edition {mag.id}&lt;/p&gt;&#13;&#10;                      &lt;div className={styles.magazineButton}&gt;&#13;&#10;                        &lt;span&gt;Read More&lt;/span&gt;&#13;&#10;                      &lt;/div&gt;&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              ))}&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/section&gt;&#13;&#10;      &lt;/main&gt;&#13;&#10;&#13;&#10;      &lt;Footer /&gt;&#13;&#10;&#13;&#10;      {/* Gallery Modal */}&#13;&#10;      &lt;GalleryModal /&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;};&#13;&#10;&#13;&#10;export default Gallery;&#13;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/vite.config.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/vite.config.js" />
              <option name="originalContent" value="import { defineConfig } from 'vite'&#10;import react from '@vitejs/plugin-react-swc'&#10;&#10;// https://vite.dev/config/&#10;export default defineConfig({&#10;  plugins: [react()],&#10;})&#10;" />
              <option name="updatedContent" value="import { defineConfig } from 'vite'&#10;import react from '@vitejs/plugin-react'&#10;&#10;// https://vite.dev/config/&#10;export default defineConfig({&#10;  plugins: [react()],&#10;})" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>